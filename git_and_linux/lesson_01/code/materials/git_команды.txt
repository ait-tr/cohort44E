Инициализировать новый репозиторий
git init rep-name


Клонировать репозиторий с удаленного сервера
git clone git@bitbucket.org/afiskon/hs-textgen.git


Добавить в репозиторий файл
git add file.txt


Удалить файл из репозитория
git rm text.txt


Проверить текущее состояние репозитория
git status


Сделать коммит (заиндексировать состояние репозитория)
git commit -a -m "Commit description"


Сделать коммит, введя его описание
git commit -m "description"


Отправить все ветки локального репозитория на удаленный
git push origin


Аналогично предыдущему, но делается пуш только ветки master
git push origin master


Запушить текущую ветку, не вводя целиком ее название
git push origin HEAD


Закачать все ветки из удаленного репозитория
git pull origin


Аналогично предыдущему, но закачивается только ветка master
git pull origin master


Закачать текущую ветку, не вводя ее длинное имя
git pull origin HEAD


Начать работать с веткой some_branch (-b создает новую)
git checkout -b some_branch origin/some_branch


Создать новую ветку
git branch some_branch


Переключиться на другую ветку (на уже существующую)
git checkout some_branch


Список доступных веток
git branch


Список всех существующих веток
git branch -a


Слить some_branch с текущей веткой
git merge some_branch


Удалить ветку (после мерджа)
git branch -d some_branch


Посмотреть лог
git log --pretty=oneline


Лог конкретного файла
git log file.txt


Как и предыдущий запрос, но с просмотром сделанных изменений
git log -p file.txt


Лог с именами файлов и с графиками веток и слияний
git log --stat --graph


Изменения, сделанные в заданном коммите
git show df438de


Посмотреть, кто менял строчку файла
git blame file.txt


Откатиться к коммиту (хэш смотрим в «git log» - последние 7 символов)
git reset --hard d8578ed


Создание тэга (для быстрой навигации по коммитам)
git tag tag_name


-----------------------------------------------------------------------------------------

1. Создание нового репозитория
заходим в папку локального репозитория.

здесь и далее в консоли

$ git init


2 создаем новый файл в папке
смотрим изменения в статусах

$ git status

обнаруживаем файлы которых не было

$ git add . // точка означает что добавить нужно все


3 запись изменений
$ git status

обнаруживаем изменения

снова делаем

$ git add

изменения добавлены

$ git status

все ок

Коммитим

$ git commit -m "comments"

4 откат изменений
4.1 откат изменений до добавления в индекс(add)!

$ git checkout -- имя.файла
$ git reset --hard HEAD // все изменения

4.2 откат изменений после до добавления в индекс(add) но до commit

4.2.1. откатываем добавление в индекс
$ git reset HEAD имф.файла
!! HEAD здесь соответствует последнему состоянию
4.2.2. откатываем изменения согласно предыдущему п.п.

4.2.3 откатиться к commit #хэш удалив последующие коммиты
Узнать хэш нужного коммита можно из GUI или командой history. Прежде чем юзать последнее выучи ключи чтобы не попасть под обвал

git reset --hard d8578edf8458ce06fbc5bb76a58c5ca4a58c5ca4
4.2.4 откатиться сохранив все последующие коммиты

5 заливаем на github
заходим github

создаем репозиторий на второй страниу выдается указание

…or push an existing repository from the command line

инструкции оттуда выполняем на своем комп

git remote add origin https://github.com/ayavryk/test.git

git push -u origin master


6 берем с github
git clone https://github.com/ayavryk/test.git

Жесткое копирование мастер-бранча

git fetch --all

git reset --hard origin/master

git pull origin master

7 переключение веток
смторим сколько веток есть

git branch

создаем новую ветку

git branch new

снова смотрим сколько веток есть и какая активная

git branch

переключаемся на новую ветку

git checkout new

снова смотрим сколько веток есть и какая активная

git branch

правим что-нибудь, добавляем, коммитим уже в новой ветке

переключаем на старую ветку master. Убеждаемся что старая - старая

переключаем на новую убеждаемся что новая - новая

Можно переключиться на новую ветку сразу после ее создания. Для этого нужно указать ключ -b

git checkout -b new
Merge
git merge --nо-ff development

здесь сливаемся с веткой development. Ключ --nо-ff указывает на то, что не хотим деталей истории на котором произошло расхождение

Clean
Удаление всех неотслеживаемых файлов. Аккуратно!!!

git clean -d -f

git stash

Этот вариант склонирует ПОЛНОСТЬЮ весь репозиторий и просто переключится на ветку branch-name:
git clone http://whatever.git -b branch-name

Иногда нужно склонировать ТОЛЬКО конкретную ветку, тогда:
git clone --branch=branch-name http://whatever.git
